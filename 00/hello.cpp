// 一个较小的 C++ 程序
/**
 * 注释:
 * - 字符 // 表示一段注释的开始, 以 // 方式开始的注释会一直延续到该行结束.
 * - 编译器编译时会忽略注释.
 * - 注释为阅读程序的人解释程序.
 */


#include <iostream>
/**
 * #include 指令:
 * - 用于请求 C++ 标准库
 * - 语法: #include <标准头文件名>
 */

/**
 * iostream 头文件
 * - 表示对顺序, 流或输入/输出的支持.
 * - 不支持随机存储或图形输入输出.
 */

int main()
/**
 * 类型
 * - 定义数据结构以及对这些数据结构的操作.
 * - C++ 两种形式的类型: 核心语言提供的内建类型 (如 int); 定义在核心语言之外的类
 * 型 (如 std::ostream).
 */

/**
 * 函数
 * - 一段具有名称的程序.
 * - 其他程序可调用函数或使函数运行.
 * - 函数声明语法: 返回类型 函数名(参数列表)
 * - 函数的具体功能由函数体定义: 函数定义 = 函数声明 + 函数体.
 */

/**
 * main 函数
 * - 运行程序时, 调用该函数响应请求. 故 C++ 程序必须含有该函数.
 * - 返回一个整数类型的值作为结果.
 *   - 0 表示成功 (若无返回语句, main 默认返回 0).
 *   - 其他值表示程序运行存在问题.
 * - main 函数的参数列表表示其从外部接收到的参数.
 */
{
  std::cout << "Hello, world!" << std::endl;
  /**
   * 名称空间
   * - 一个相关名称的集合.
   * - 标准库使用 std 包含所有由它定义的名称.
   * - 可通过 :: (作用域运算符) 调用名称空间中的名称.
   */

  /**
   * 标准输出流 std::cout
   * - 标准输出流用于进行普通的程序输出. 在窗口操作系统环境下, 它将指示输出窗口.
   * - 类型为 std::ostream
   */

  /**
   * 输出流运算符 <<
   * - 左结合运算符
   * - 左操作数总为 `std::ostream` 或其派生类.
   * - 右操作数为所希望输出的数据 (通过重载 << 定义输出方式).
   * - 最终计算结果仍为 `std::ostream` 或其派生类.
   */

  /**
   * 字符串字面量
   * - 语法: "字符串字面量内容"
   * - 跟在 \ 后的字符具有特殊含义, 如 \n, \t, \b, \", \', \\.
   */

  /**
   * 控制器 std::endl
   * - 写入流以控制流.
   * - 若 << 的左操作数类型为 std::ostream, 右操作数为控制器, 则 << 将对特定流执
   * 行控制器所指定的动作, 同时返回流作为其结果.
   * - std::endl 用于结束当前输出行.
   */

  /**
   * 表达式 = 运算符 + 操作数
   * - 使程序对某些事物进行运算.
   * - 运算产生一个结果, 同时可能出现副作用.
   * - 副作用会影响程序或系统环境的状态.
   */

  /**
   * 分号
   * - 用于标记语句的结尾.
   * - 若表达式后跟着分号, 则丢弃表达式的值, 只利用表达式的副作用.
   * - 只有分号的语句称为空语句, 无任何实际作用.
   */

  return 0;
  /**
   * 返回语句
   * - 在其出现的位置终止函数运行.
   * - 返回一个值给调用该函数的程序, 其类型同函数声明的返回类型一致.
   */
}
/**
 * 体
 * - 左花括号表示体的开始, 右花括号表示体的结束.
 * - 将花括号之间的语句当作一个单元处理.
 * - 对函数声明下的体而言, 该体定义了该函数, 称为函数体.
 * - 语法: { 语句 }
 */

/**
 * 作用域
 * - 只有在作用域中, 名称才有意义.
 * - 名称空间, 函数体为作用域.
 * - 可通过 :: 作用域运算符来调用特定几种作用域中的名称.
 *   - 全局
 *   - 类
 *   - 名称空间
 *   - 基类
 */